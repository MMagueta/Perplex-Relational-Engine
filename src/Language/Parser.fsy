%{
open Language
%}

// The start token becomes a parser function in the compiled code:
%start start

// Regular tokens
%token <string> IDENTIFIER
%token <int> LITERAL_INTEGER
%token <string> LITERAL_STRING
%token <string> TYPE'
%token CREATE
%token RELATION
%token INSERT
%token UPDATE
%token PROJECT
%token SELECT
%token EQUAL
%token MINUS
%token PLUS
%token NOT
%token SUM
%token ALL
%token SET
%token LOCK_READ
%token LOCK_WRITE
%token BEGIN
%token END
%token RESTRICT
%token TAKING
%token CONSTRAINT
%token GTE
%token AT

// Misc tokens
%token EOF
%token LEFT_LIM
%token RIGHT_LIM

// This is the type of the data produced by a successful reduction of the 'start'
// symbol:
%type < Expression.t option > start

%%

// These are the rules of the grammar along with the F# code of the 
// actions executed as rules are reduced.  


start: File end { $1 }
     | end      { None }

File:
	| LOCK_READ Statement { Some (Expression.LockRead $2) }
	| LOCK_WRITE Statement { Some (Expression.LockWrite $2) }
        | BEGIN IDENTIFIER IDENTIFIER IDENTIFIER ListStatements END { Some (Expression.Begin ([$2; $3; $4],$5))}
	| Statement { Some $1 }
        
Statement:
    | ProjectionQuery { $1 }
    | CREATE RELATION IDENTIFIER LEFT_LIM ListAttributes RIGHT_LIM 
	    { Expression.CreateRelation ($3, Map.ofList $5) }
    | INSERT IDENTIFIER LEFT_LIM ListValues RIGHT_LIM
	    { Expression.Insert ($2, List.map (fun ((identifier: string), type', value) -> { FieldName = identifier; FieldType = type'; FieldValue = value }: Expression.InsertFieldInfo) $4 |> Array.ofList) }
	//  1         2       3       4         5       6               7       8     9     10     11        12     13     14        15            16      17    18     19   20          21     22       23       24         25         26       27      28
    // | UPDATE IDENTIFIER SET IDENTIFIER LEFT_LIM ProjectionQuery MINUS LEFT_LIM PROJECT SUM LEFT_LIM IDENTIFIER TYPE' RIGHT_LIM IDENTIFIER Refinement MINUS PROJECT  IDENTIFIER Refinement RIGHT_LIM RIGHT_LIM Refinement Constraint
	    // { Expression.Update ($2, {FieldName = $4; FieldType = Type.TInteger32; FieldValue =  }
        // | UPDATE IDENTIFIER LEFT_LIM ListAttributes RIGHT_LIM LEFT_LIM Statement RIGHT_LIM SELECT IDENTIFIER EQUAL LITERAL_INTEGER
	//     { Expression.Update ($2, List.map (fun ((identifier: string), type') ->
        //                                         { FieldName = identifier
        //                                           FieldType = type'
        //                                           FieldValue = $7 }: Expression.UpdateFieldInfo) $4
        //                              |> Array.ofList, Some (Expression.Operators.Equal ($10, $12))) }

Operation:
    | Statement MINUS Statement
      { Expression.Minus($1, $3) }
    | Statement PLUS Statement
      { Expression.Plus($1, $3) }
    | Statement EQUAL Statement
      { Expression.Equal($1, $3) }
    | Statement GTE Statement
      { Expression.Gte($1, $3) }

Projection:
    | TAKING LITERAL_INTEGER LEFT_LIM ListAttributes RIGHT_LIM
      { Expression.ProjectionParameter.Taking ($2, $4 |> List.map (fun (name, _type') -> name)) }
    | SUM LEFT_LIM IDENTIFIER TYPE' RIGHT_LIM
      { Expression.ProjectionParameter.Sum $3 }
    | ALL
      { Expression.ProjectionParameter.All }
    | LEFT_LIM ListAttributes RIGHT_LIM
      { List.map (fun ((identifier: string), _type') -> identifier) $2 |> Expression.ProjectionParameter.Restrict }
      
ProjectionQuery:
    | PROJECT Projection IDENTIFIER Refinement
        { Expression.Project ($3, $2, $4) }

Constraint:
    | { None }
    | CONSTRAINT FunctionOperator LocalizedIdentifier { Some <| ($2, [$3]) }
    
FunctionOperator:
    | GTE { Expression.FGte }

Refinement:
    | { None }
    | SELECT LocalizedIdentifier EQUAL LITERAL_INTEGER
        { Some <| Expression.Operators.Equal ($2, Expression.Literal (Value.VInteger32 $4)) }

LocalizedIdentifier:
    | IDENTIFIER AT IDENTIFIER
        { Expression.LocalizedIdentifier ($1, $3) }

ListAttributes:
  | { [] }
  | Rev_Attributes { List.rev $1 }

Rev_Attributes:
  | IDENTIFIER TYPE' LEFT_LIM LITERAL_INTEGER RIGHT_LIM
    { match $2 with
      | "VARCHAR" -> [($1, Type.TVariableString $4)] }
  | IDENTIFIER TYPE' 
    { match $2 with
      | "INTEGER" -> [($1, Type.TInteger32)]
      | "VARCHAR" -> failwith "VARCHAR is a parametric type, therefore it requires a size." }
  | Rev_Attributes IDENTIFIER TYPE' { ($2, match $3 with
                                           | "INTEGER" -> Type.TInteger32
                                           | "VARCHAR" -> failwith "VARCHAR is a parametric type, therefore it requires a size.") :: $1 }
  | Rev_Attributes IDENTIFIER TYPE' LEFT_LIM LITERAL_INTEGER RIGHT_LIM 
    { ($2, match $3 with
           | "VARCHAR" -> Type.TVariableString $5) :: $1 }

ListValues:
  | { [] }
  | Rev_Values { List.rev $1 }

Rev_Values:
  | IDENTIFIER TYPE' LEFT_LIM LITERAL_INTEGER RIGHT_LIM LITERAL_STRING
    { match $2 with
      | "VARCHAR" -> [($1, Type.TVariableString $4, Value.VVariableString $6)] }
  | IDENTIFIER TYPE' LITERAL_INTEGER
    { match $2 with
      | "INTEGER" -> [($1, Type.TInteger32, Value.VInteger32 $3)]
      | "VARCHAR" -> failwith "VARCHAR is a parametric type, therefore it requires a size." }
  | Rev_Values IDENTIFIER TYPE' LITERAL_INTEGER
    { ($2, (match $3 with
            | "INTEGER" -> Type.TInteger32
            | "VARCHAR" -> failwith "VARCHAR is a parametric type, therefore it requires a size."), Value.VInteger32 $4) :: $1 }
  | Rev_Values IDENTIFIER TYPE' LEFT_LIM LITERAL_INTEGER RIGHT_LIM LITERAL_STRING 
    { ($2, (match $3 with
            | "VARCHAR" -> Type.TVariableString $5), Value.VVariableString $7) :: $1 }

ListStatements:
  | { [] }
  | RevStatements { List.rev $1 }

RevStatements:
  | Statement
    { [$1] }
  | RevStatements Statement
    { $2 :: $1 }

// Using F# keywords for nonterminal names is okay.
end: EOF { None }

