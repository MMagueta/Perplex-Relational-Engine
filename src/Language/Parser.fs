// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open Language

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | RIGHT_LIM
  | LEFT_LIM
  | EOF
  | TAKING
  | RESTRICT
  | END
  | BEGIN
  | LOCK_WRITE
  | LOCK_READ
  | SET
  | ALL
  | SUM
  | NOT
  | PLUS
  | MINUS
  | EQUAL
  | SELECT
  | PROJECT
  | UPDATE
  | INSERT
  | RELATION
  | CREATE
  | TYPE' of (string)
  | LITERAL_STRING of (string)
  | LITERAL_INTEGER of (int)
  | IDENTIFIER of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_RIGHT_LIM
    | TOKEN_LEFT_LIM
    | TOKEN_EOF
    | TOKEN_TAKING
    | TOKEN_RESTRICT
    | TOKEN_END
    | TOKEN_BEGIN
    | TOKEN_LOCK_WRITE
    | TOKEN_LOCK_READ
    | TOKEN_SET
    | TOKEN_ALL
    | TOKEN_SUM
    | TOKEN_NOT
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_EQUAL
    | TOKEN_SELECT
    | TOKEN_PROJECT
    | TOKEN_UPDATE
    | TOKEN_INSERT
    | TOKEN_RELATION
    | TOKEN_CREATE
    | TOKEN_TYPE'
    | TOKEN_LITERAL_STRING
    | TOKEN_LITERAL_INTEGER
    | TOKEN_IDENTIFIER
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_File
    | NONTERM_Statement
    | NONTERM_RestrictionQuery
    | NONTERM_Refinement
    | NONTERM_ListAttributes
    | NONTERM_Rev_Attributes
    | NONTERM_ListValues
    | NONTERM_Rev_Values
    | NONTERM_ListStatements
    | NONTERM_RevStatements
    | NONTERM_end

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | RIGHT_LIM  -> 0 
  | LEFT_LIM  -> 1 
  | EOF  -> 2 
  | TAKING  -> 3 
  | RESTRICT  -> 4 
  | END  -> 5 
  | BEGIN  -> 6 
  | LOCK_WRITE  -> 7 
  | LOCK_READ  -> 8 
  | SET  -> 9 
  | ALL  -> 10 
  | SUM  -> 11 
  | NOT  -> 12 
  | PLUS  -> 13 
  | MINUS  -> 14 
  | EQUAL  -> 15 
  | SELECT  -> 16 
  | PROJECT  -> 17 
  | UPDATE  -> 18 
  | INSERT  -> 19 
  | RELATION  -> 20 
  | CREATE  -> 21 
  | TYPE' _ -> 22 
  | LITERAL_STRING _ -> 23 
  | LITERAL_INTEGER _ -> 24 
  | IDENTIFIER _ -> 25 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_RIGHT_LIM 
  | 1 -> TOKEN_LEFT_LIM 
  | 2 -> TOKEN_EOF 
  | 3 -> TOKEN_TAKING 
  | 4 -> TOKEN_RESTRICT 
  | 5 -> TOKEN_END 
  | 6 -> TOKEN_BEGIN 
  | 7 -> TOKEN_LOCK_WRITE 
  | 8 -> TOKEN_LOCK_READ 
  | 9 -> TOKEN_SET 
  | 10 -> TOKEN_ALL 
  | 11 -> TOKEN_SUM 
  | 12 -> TOKEN_NOT 
  | 13 -> TOKEN_PLUS 
  | 14 -> TOKEN_MINUS 
  | 15 -> TOKEN_EQUAL 
  | 16 -> TOKEN_SELECT 
  | 17 -> TOKEN_PROJECT 
  | 18 -> TOKEN_UPDATE 
  | 19 -> TOKEN_INSERT 
  | 20 -> TOKEN_RELATION 
  | 21 -> TOKEN_CREATE 
  | 22 -> TOKEN_TYPE' 
  | 23 -> TOKEN_LITERAL_STRING 
  | 24 -> TOKEN_LITERAL_INTEGER 
  | 25 -> TOKEN_IDENTIFIER 
  | 28 -> TOKEN_end_of_input
  | 26 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_start 
    | 3 -> NONTERM_File 
    | 4 -> NONTERM_File 
    | 5 -> NONTERM_File 
    | 6 -> NONTERM_File 
    | 7 -> NONTERM_Statement 
    | 8 -> NONTERM_Statement 
    | 9 -> NONTERM_Statement 
    | 10 -> NONTERM_Statement 
    | 11 -> NONTERM_Statement 
    | 12 -> NONTERM_Statement 
    | 13 -> NONTERM_RestrictionQuery 
    | 14 -> NONTERM_Refinement 
    | 15 -> NONTERM_Refinement 
    | 16 -> NONTERM_ListAttributes 
    | 17 -> NONTERM_ListAttributes 
    | 18 -> NONTERM_Rev_Attributes 
    | 19 -> NONTERM_Rev_Attributes 
    | 20 -> NONTERM_Rev_Attributes 
    | 21 -> NONTERM_Rev_Attributes 
    | 22 -> NONTERM_ListValues 
    | 23 -> NONTERM_ListValues 
    | 24 -> NONTERM_Rev_Values 
    | 25 -> NONTERM_Rev_Values 
    | 26 -> NONTERM_Rev_Values 
    | 27 -> NONTERM_Rev_Values 
    | 28 -> NONTERM_ListStatements 
    | 29 -> NONTERM_ListStatements 
    | 30 -> NONTERM_RevStatements 
    | 31 -> NONTERM_RevStatements 
    | 32 -> NONTERM_end 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 28 
let _fsyacc_tagOfErrorTerminal = 26

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | RIGHT_LIM  -> "RIGHT_LIM" 
  | LEFT_LIM  -> "LEFT_LIM" 
  | EOF  -> "EOF" 
  | TAKING  -> "TAKING" 
  | RESTRICT  -> "RESTRICT" 
  | END  -> "END" 
  | BEGIN  -> "BEGIN" 
  | LOCK_WRITE  -> "LOCK_WRITE" 
  | LOCK_READ  -> "LOCK_READ" 
  | SET  -> "SET" 
  | ALL  -> "ALL" 
  | SUM  -> "SUM" 
  | NOT  -> "NOT" 
  | PLUS  -> "PLUS" 
  | MINUS  -> "MINUS" 
  | EQUAL  -> "EQUAL" 
  | SELECT  -> "SELECT" 
  | PROJECT  -> "PROJECT" 
  | UPDATE  -> "UPDATE" 
  | INSERT  -> "INSERT" 
  | RELATION  -> "RELATION" 
  | CREATE  -> "CREATE" 
  | TYPE' _ -> "TYPE'" 
  | LITERAL_STRING _ -> "LITERAL_STRING" 
  | LITERAL_INTEGER _ -> "LITERAL_INTEGER" 
  | IDENTIFIER _ -> "IDENTIFIER" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | RIGHT_LIM  -> (null : System.Object) 
  | LEFT_LIM  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | TAKING  -> (null : System.Object) 
  | RESTRICT  -> (null : System.Object) 
  | END  -> (null : System.Object) 
  | BEGIN  -> (null : System.Object) 
  | LOCK_WRITE  -> (null : System.Object) 
  | LOCK_READ  -> (null : System.Object) 
  | SET  -> (null : System.Object) 
  | ALL  -> (null : System.Object) 
  | SUM  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | PLUS  -> (null : System.Object) 
  | MINUS  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | SELECT  -> (null : System.Object) 
  | PROJECT  -> (null : System.Object) 
  | UPDATE  -> (null : System.Object) 
  | INSERT  -> (null : System.Object) 
  | RELATION  -> (null : System.Object) 
  | CREATE  -> (null : System.Object) 
  | TYPE' _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LITERAL_STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LITERAL_INTEGER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENTIFIER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;1us;65535us;0us;2us;5us;65535us;0us;15us;5us;6us;7us;8us;12us;111us;110us;112us;1us;65535us;47us;48us;7us;65535us;26us;27us;33us;34us;36us;37us;57us;58us;66us;67us;69us;70us;78us;79us;2us;65535us;19us;20us;23us;24us;2us;65535us;19us;84us;23us;84us;1us;65535us;40us;41us;1us;65535us;40us;95us;1us;65535us;12us;13us;1us;65535us;12us;110us;2us;65535us;0us;4us;2us;3us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;5us;11us;13us;21us;24us;27us;29us;31us;33us;35us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;1us;1us;2us;1us;3us;1us;3us;1us;4us;1us;4us;1us;5us;1us;5us;1us;5us;1us;5us;1us;5us;1us;5us;1us;6us;1us;7us;1us;7us;1us;7us;1us;7us;1us;7us;1us;7us;3us;8us;9us;10us;1us;8us;1us;8us;1us;8us;1us;8us;1us;8us;1us;9us;1us;9us;1us;9us;1us;9us;1us;9us;1us;9us;1us;9us;1us;10us;1us;10us;1us;10us;1us;11us;1us;11us;1us;11us;1us;11us;1us;11us;1us;12us;1us;12us;1us;12us;1us;12us;1us;12us;1us;12us;1us;12us;1us;12us;1us;12us;1us;12us;1us;12us;1us;12us;1us;12us;1us;12us;1us;12us;1us;12us;1us;12us;1us;12us;1us;12us;1us;12us;1us;12us;1us;12us;1us;12us;1us;12us;1us;12us;1us;12us;1us;12us;1us;12us;1us;13us;1us;13us;1us;13us;1us;13us;1us;13us;1us;13us;1us;13us;1us;13us;1us;13us;1us;15us;1us;15us;1us;15us;1us;15us;3us;17us;20us;21us;2us;18us;19us;2us;18us;19us;1us;18us;1us;18us;1us;18us;2us;20us;21us;2us;20us;21us;1us;21us;1us;21us;1us;21us;3us;23us;26us;27us;2us;24us;25us;2us;24us;25us;1us;24us;1us;24us;1us;24us;1us;24us;1us;25us;2us;26us;27us;2us;26us;27us;1us;26us;1us;27us;1us;27us;1us;27us;1us;27us;2us;29us;31us;1us;30us;1us;31us;1us;32us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;10us;12us;14us;16us;18us;20us;22us;24us;26us;28us;30us;32us;34us;36us;38us;40us;42us;44us;48us;50us;52us;54us;56us;58us;60us;62us;64us;66us;68us;70us;72us;74us;76us;78us;80us;82us;84us;86us;88us;90us;92us;94us;96us;98us;100us;102us;104us;106us;108us;110us;112us;114us;116us;118us;120us;122us;124us;126us;128us;130us;132us;134us;136us;138us;140us;142us;144us;146us;148us;150us;152us;154us;156us;158us;160us;162us;164us;166us;168us;170us;174us;177us;180us;182us;184us;186us;189us;192us;194us;196us;198us;202us;205us;208us;210us;212us;214us;216us;218us;221us;224us;226us;228us;230us;232us;234us;237us;239us;241us;|]
let _fsyacc_action_rows = 114
let _fsyacc_actionTableElements = [|8us;32768us;2us;113us;6us;9us;7us;7us;8us;5us;17us;22us;18us;43us;19us;38us;21us;16us;0us;49152us;1us;32768us;2us;113us;0us;16385us;0us;16386us;4us;32768us;17us;22us;18us;43us;19us;38us;21us;16us;0us;16387us;4us;32768us;17us;22us;18us;43us;19us;38us;21us;16us;0us;16388us;1us;32768us;25us;10us;1us;32768us;25us;11us;1us;32768us;25us;12us;4us;16412us;17us;22us;18us;43us;19us;38us;21us;16us;1us;32768us;5us;14us;0us;16389us;0us;16390us;1us;32768us;20us;17us;1us;32768us;25us;18us;1us;32768us;1us;19us;1us;16400us;25us;85us;1us;32768us;0us;21us;0us;16391us;3us;32768us;1us;23us;10us;35us;11us;28us;1us;16400us;25us;85us;1us;32768us;0us;25us;1us;32768us;25us;26us;1us;16398us;16us;80us;0us;16392us;1us;32768us;1us;29us;1us;32768us;25us;30us;1us;32768us;22us;31us;1us;32768us;0us;32us;1us;32768us;25us;33us;1us;16398us;16us;80us;0us;16393us;1us;32768us;25us;36us;1us;16398us;16us;80us;0us;16394us;1us;32768us;25us;39us;1us;32768us;1us;40us;1us;16406us;25us;96us;1us;32768us;0us;42us;0us;16395us;1us;32768us;25us;44us;1us;32768us;9us;45us;1us;32768us;25us;46us;1us;32768us;1us;47us;1us;32768us;17us;71us;1us;32768us;14us;49us;1us;32768us;1us;50us;1us;32768us;17us;51us;1us;32768us;11us;52us;1us;32768us;1us;53us;1us;32768us;25us;54us;1us;32768us;22us;55us;1us;32768us;0us;56us;1us;32768us;25us;57us;1us;16398us;16us;80us;1us;32768us;14us;59us;1us;32768us;17us;60us;1us;32768us;11us;61us;1us;32768us;1us;62us;1us;32768us;25us;63us;1us;32768us;22us;64us;1us;32768us;0us;65us;1us;32768us;25us;66us;1us;16398us;16us;80us;1us;32768us;0us;68us;1us;32768us;0us;69us;1us;16398us;16us;80us;0us;16396us;1us;32768us;3us;72us;1us;32768us;24us;73us;1us;32768us;1us;74us;1us;32768us;25us;75us;1us;32768us;22us;76us;1us;32768us;0us;77us;1us;32768us;25us;78us;1us;16398us;16us;80us;0us;16397us;1us;32768us;25us;81us;1us;32768us;15us;82us;1us;32768us;24us;83us;0us;16399us;1us;16401us;25us;90us;1us;32768us;22us;86us;1us;16403us;1us;87us;1us;32768us;24us;88us;1us;32768us;0us;89us;0us;16402us;1us;32768us;22us;91us;1us;16404us;1us;92us;1us;32768us;24us;93us;1us;32768us;0us;94us;0us;16405us;1us;16407us;25us;103us;1us;32768us;22us;97us;2us;32768us;1us;98us;24us;102us;1us;32768us;24us;99us;1us;32768us;0us;100us;1us;32768us;23us;101us;0us;16408us;0us;16409us;1us;32768us;22us;104us;2us;32768us;1us;106us;24us;105us;0us;16410us;1us;32768us;24us;107us;1us;32768us;0us;108us;1us;32768us;23us;109us;0us;16411us;4us;16413us;17us;22us;18us;43us;19us;38us;21us;16us;0us;16414us;0us;16415us;0us;16416us;|]
let _fsyacc_actionTableRowOffsets = [|0us;9us;10us;12us;13us;14us;19us;20us;25us;26us;28us;30us;32us;37us;39us;40us;41us;43us;45us;47us;49us;51us;52us;56us;58us;60us;62us;64us;65us;67us;69us;71us;73us;75us;77us;78us;80us;82us;83us;85us;87us;89us;91us;92us;94us;96us;98us;100us;102us;104us;106us;108us;110us;112us;114us;116us;118us;120us;122us;124us;126us;128us;130us;132us;134us;136us;138us;140us;142us;144us;146us;147us;149us;151us;153us;155us;157us;159us;161us;163us;164us;166us;168us;170us;171us;173us;175us;177us;179us;181us;182us;184us;186us;188us;190us;191us;193us;195us;198us;200us;202us;204us;205us;206us;208us;211us;212us;214us;216us;218us;219us;224us;225us;226us;|]
let _fsyacc_reductionSymbolCounts = [|1us;2us;1us;2us;2us;6us;1us;6us;6us;8us;4us;5us;28us;9us;0us;4us;0us;1us;5us;2us;3us;6us;0us;1us;6us;3us;4us;7us;0us;1us;1us;2us;1us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;1us;2us;2us;2us;2us;3us;3us;3us;3us;3us;3us;4us;5us;5us;6us;6us;7us;7us;7us;7us;8us;8us;9us;9us;9us;9us;10us;10us;11us;11us;12us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;16385us;16386us;65535us;16387us;65535us;16388us;65535us;65535us;65535us;65535us;65535us;16389us;16390us;65535us;65535us;65535us;65535us;65535us;16391us;65535us;65535us;65535us;65535us;65535us;16392us;65535us;65535us;65535us;65535us;65535us;65535us;16393us;65535us;65535us;16394us;65535us;65535us;65535us;65535us;16395us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16396us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;65535us;16397us;65535us;65535us;65535us;16399us;65535us;65535us;65535us;65535us;65535us;16402us;65535us;65535us;65535us;65535us;16405us;65535us;65535us;65535us;65535us;65535us;65535us;16408us;16409us;65535us;65535us;16410us;65535us;65535us;65535us;16411us;65535us;16414us;16415us;16416us;|]
let _fsyacc_reductions = lazy [|
# 259 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  Expression.t option  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstart));
# 268 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_File in
            let _2 = parseState.GetInput(2) :?> 'gentype_end in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                                       _1 
                   )
# 48 "Parser.fsy"
                 :  Expression.t option ));
# 280 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_end in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 49 "Parser.fsy"
                                       None 
                   )
# 49 "Parser.fsy"
                 :  Expression.t option ));
# 291 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Statement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                              Some (Expression.LockRead _2) 
                   )
# 52 "Parser.fsy"
                 : 'gentype_File));
# 302 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> 'gentype_Statement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 53 "Parser.fsy"
                                               Some (Expression.LockWrite _2) 
                   )
# 53 "Parser.fsy"
                 : 'gentype_File));
# 313 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> string in
            let _4 = parseState.GetInput(4) :?> string in
            let _5 = parseState.GetInput(5) :?> 'gentype_ListStatements in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 54 "Parser.fsy"
                                                                                           Some (Expression.Begin ([_2; _3; _4],_5))
                   )
# 54 "Parser.fsy"
                 : 'gentype_File));
# 327 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Statement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 55 "Parser.fsy"
                                    Some _1 
                   )
# 55 "Parser.fsy"
                 : 'gentype_File));
# 338 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> string in
            let _5 = parseState.GetInput(5) :?> 'gentype_ListAttributes in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                            Expression.CreateRelation (_3, Map.ofList _5) 
                   )
# 59 "Parser.fsy"
                 : 'gentype_Statement));
# 350 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_ListAttributes in
            let _5 = parseState.GetInput(5) :?> string in
            let _6 = parseState.GetInput(6) :?> 'gentype_Refinement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 61 "Parser.fsy"
                                   Expression.Project (_5, List.map (fun ((identifier: string), _type') -> identifier) _3
                                                           |> Expression.ProjectionParameter.Restrict, _6) 
                   )
# 61 "Parser.fsy"
                 : 'gentype_Statement));
# 364 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _4 = parseState.GetInput(4) :?> string in
            let _5 = parseState.GetInput(5) :?> string in
            let _7 = parseState.GetInput(7) :?> string in
            let _8 = parseState.GetInput(8) :?> 'gentype_Refinement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 64 "Parser.fsy"
                                   Expression.Project (_7, Expression.ProjectionParameter.Sum _4, _8) 
                   )
# 64 "Parser.fsy"
                 : 'gentype_Statement));
# 378 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_Refinement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                                   Expression.Project (_3, Expression.ProjectionParameter.All, _4) 
                   )
# 66 "Parser.fsy"
                 : 'gentype_Statement));
# 390 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_ListValues in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 68 "Parser.fsy"
                            Expression.Insert (_2, List.map (fun ((identifier: string), type', value) -> { FieldName = identifier; FieldType = type'; FieldValue = value }: Expression.InsertFieldInfo) _4 |> Array.ofList) 
                   )
# 68 "Parser.fsy"
                 : 'gentype_Statement));
# 402 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> string in
            let _6 = parseState.GetInput(6) :?> 'gentype_RestrictionQuery in
            let _12 = parseState.GetInput(12) :?> string in
            let _13 = parseState.GetInput(13) :?> string in
            let _15 = parseState.GetInput(15) :?> string in
            let _16 = parseState.GetInput(16) :?> 'gentype_Refinement in
            let _21 = parseState.GetInput(21) :?> string in
            let _22 = parseState.GetInput(22) :?> string in
            let _24 = parseState.GetInput(24) :?> string in
            let _25 = parseState.GetInput(25) :?> 'gentype_Refinement in
            let _28 = parseState.GetInput(28) :?> 'gentype_Refinement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                            Expression.Update (_2, {FieldName = _4; FieldType = Type.TInteger32; FieldValue = Expression.Minus (_6, Expression.Minus (Expression.Project (_15, Expression.ProjectionParameter.Sum _12, _16), Expression.Project (_24, Expression.ProjectionParameter.Sum _21, _25)))}, _28) 
                   )
# 71 "Parser.fsy"
                 : 'gentype_Statement));
# 424 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> int in
            let _5 = parseState.GetInput(5) :?> string in
            let _6 = parseState.GetInput(6) :?> string in
            let _8 = parseState.GetInput(8) :?> string in
            let _9 = parseState.GetInput(9) :?> 'gentype_Refinement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsy"
                               let projection = Expression.ProjectionParameter.Taking (_3, [_5])
                               Expression.Project (_8, projection, _9) 
                   )
# 82 "Parser.fsy"
                 : 'gentype_RestrictionQuery));
# 440 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                                 None 
                   )
# 86 "Parser.fsy"
                 : 'gentype_Refinement));
# 450 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 88 "Parser.fsy"
                                   Some <| Expression.Operators.Equal (_2, _4) 
                   )
# 88 "Parser.fsy"
                 : 'gentype_Refinement));
# 462 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 91 "Parser.fsy"
                           [] 
                   )
# 91 "Parser.fsy"
                 : 'gentype_ListAttributes));
# 472 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Rev_Attributes in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 92 "Parser.fsy"
                                          List.rev _1 
                   )
# 92 "Parser.fsy"
                 : 'gentype_ListAttributes));
# 483 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 96 "Parser.fsy"
                           match _2 with
                           | "VARCHAR" -> [(_1, Type.TVariableString _4)] 
                   )
# 96 "Parser.fsy"
                 : 'gentype_Rev_Attributes));
# 497 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 99 "Parser.fsy"
                           match _2 with
                           | "INTEGER" -> [(_1, Type.TInteger32)]
                           | "VARCHAR" -> failwith "VARCHAR is a parametric type, therefore it requires a size." 
                   )
# 99 "Parser.fsy"
                 : 'gentype_Rev_Attributes));
# 511 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Rev_Attributes in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 102 "Parser.fsy"
                                                           (_2, match _3 with
                                                                | "INTEGER" -> Type.TInteger32
                                                                | "VARCHAR" -> failwith "VARCHAR is a parametric type, therefore it requires a size.") :: _1 
                   )
# 102 "Parser.fsy"
                 : 'gentype_Rev_Attributes));
# 526 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Rev_Attributes in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> string in
            let _5 = parseState.GetInput(5) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 106 "Parser.fsy"
                           (_2, match _3 with
                                | "VARCHAR" -> Type.TVariableString _5) :: _1 
                   )
# 106 "Parser.fsy"
                 : 'gentype_Rev_Attributes));
# 541 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 110 "Parser.fsy"
                           [] 
                   )
# 110 "Parser.fsy"
                 : 'gentype_ListValues));
# 551 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Rev_Values in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 111 "Parser.fsy"
                                      List.rev _1 
                   )
# 111 "Parser.fsy"
                 : 'gentype_ListValues));
# 562 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> int in
            let _6 = parseState.GetInput(6) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 115 "Parser.fsy"
                           match _2 with
                           | "VARCHAR" -> [(_1, Type.TVariableString _4, Value.VVariableString _6)] 
                   )
# 115 "Parser.fsy"
                 : 'gentype_Rev_Values));
# 577 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 118 "Parser.fsy"
                           match _2 with
                           | "INTEGER" -> [(_1, Type.TInteger32, Value.VInteger32 _3)]
                           | "VARCHAR" -> failwith "VARCHAR is a parametric type, therefore it requires a size." 
                   )
# 118 "Parser.fsy"
                 : 'gentype_Rev_Values));
# 592 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Rev_Values in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> string in
            let _4 = parseState.GetInput(4) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 122 "Parser.fsy"
                           (_2, (match _3 with
                                 | "INTEGER" -> Type.TInteger32
                                 | "VARCHAR" -> failwith "VARCHAR is a parametric type, therefore it requires a size."), Value.VInteger32 _4) :: _1 
                   )
# 122 "Parser.fsy"
                 : 'gentype_Rev_Values));
# 608 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Rev_Values in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> string in
            let _5 = parseState.GetInput(5) :?> int in
            let _7 = parseState.GetInput(7) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 126 "Parser.fsy"
                           (_2, (match _3 with
                                 | "VARCHAR" -> Type.TVariableString _5), Value.VVariableString _7) :: _1 
                   )
# 126 "Parser.fsy"
                 : 'gentype_Rev_Values));
# 624 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 130 "Parser.fsy"
                           [] 
                   )
# 130 "Parser.fsy"
                 : 'gentype_ListStatements));
# 634 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_RevStatements in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 131 "Parser.fsy"
                                         List.rev _1 
                   )
# 131 "Parser.fsy"
                 : 'gentype_ListStatements));
# 645 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Statement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 135 "Parser.fsy"
                           [_1] 
                   )
# 135 "Parser.fsy"
                 : 'gentype_RevStatements));
# 656 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_RevStatements in
            let _2 = parseState.GetInput(2) :?> 'gentype_Statement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 137 "Parser.fsy"
                           _2 :: _1 
                   )
# 137 "Parser.fsy"
                 : 'gentype_RevStatements));
# 668 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 140 "Parser.fsy"
                                None 
                   )
# 140 "Parser.fsy"
                 : 'gentype_end));
|]
# 679 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 29;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let start lexer lexbuf :  Expression.t option  =
    engine lexer lexbuf 0 :?> _
