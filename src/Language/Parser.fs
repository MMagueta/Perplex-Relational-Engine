// Implementation file for parser generated by fsyacc
module Parser
#nowarn "64";; // turn off warnings that type variables used in production annotations are instantiated to concrete type
open FSharp.Text.Lexing
open FSharp.Text.Parsing.ParseHelpers
# 1 "Parser.fsy"

open Language

# 10 "Parser.fs"
// This type is the type of tokens accepted by the parser
type token = 
  | RIGHT_LIM
  | LEFT_LIM
  | EOF
  | NOT
  | EQUAL
  | SELECT
  | PROJECT
  | INSERT
  | RELATION
  | CREATE
  | TYPE' of (string)
  | LITERAL_STRING of (string)
  | LITERAL_INTEGER of (int)
  | IDENTIFIER of (string)
// This type is used to give symbolic names to token indexes, useful for error messages
type tokenId = 
    | TOKEN_RIGHT_LIM
    | TOKEN_LEFT_LIM
    | TOKEN_EOF
    | TOKEN_NOT
    | TOKEN_EQUAL
    | TOKEN_SELECT
    | TOKEN_PROJECT
    | TOKEN_INSERT
    | TOKEN_RELATION
    | TOKEN_CREATE
    | TOKEN_TYPE'
    | TOKEN_LITERAL_STRING
    | TOKEN_LITERAL_INTEGER
    | TOKEN_IDENTIFIER
    | TOKEN_end_of_input
    | TOKEN_error
// This type is used to give symbolic names to token indexes, useful for error messages
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_File
    | NONTERM_Statement
    | NONTERM_ListAttributes
    | NONTERM_Rev_Attributes
    | NONTERM_ListValues
    | NONTERM_Rev_Values
    | NONTERM_end

// This function maps tokens to integer indexes
let tagOfToken (t:token) = 
  match t with
  | RIGHT_LIM  -> 0 
  | LEFT_LIM  -> 1 
  | EOF  -> 2 
  | NOT  -> 3 
  | EQUAL  -> 4 
  | SELECT  -> 5 
  | PROJECT  -> 6 
  | INSERT  -> 7 
  | RELATION  -> 8 
  | CREATE  -> 9 
  | TYPE' _ -> 10 
  | LITERAL_STRING _ -> 11 
  | LITERAL_INTEGER _ -> 12 
  | IDENTIFIER _ -> 13 

// This function maps integer indexes to symbolic token ids
let tokenTagToTokenId (tokenIdx:int) = 
  match tokenIdx with
  | 0 -> TOKEN_RIGHT_LIM 
  | 1 -> TOKEN_LEFT_LIM 
  | 2 -> TOKEN_EOF 
  | 3 -> TOKEN_NOT 
  | 4 -> TOKEN_EQUAL 
  | 5 -> TOKEN_SELECT 
  | 6 -> TOKEN_PROJECT 
  | 7 -> TOKEN_INSERT 
  | 8 -> TOKEN_RELATION 
  | 9 -> TOKEN_CREATE 
  | 10 -> TOKEN_TYPE' 
  | 11 -> TOKEN_LITERAL_STRING 
  | 12 -> TOKEN_LITERAL_INTEGER 
  | 13 -> TOKEN_IDENTIFIER 
  | 16 -> TOKEN_end_of_input
  | 14 -> TOKEN_error
  | _ -> failwith "tokenTagToTokenId: bad token"

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
let prodIdxToNonTerminal (prodIdx:int) = 
  match prodIdx with
    | 0 -> NONTERM__startstart 
    | 1 -> NONTERM_start 
    | 2 -> NONTERM_start 
    | 3 -> NONTERM_File 
    | 4 -> NONTERM_Statement 
    | 5 -> NONTERM_Statement 
    | 6 -> NONTERM_Statement 
    | 7 -> NONTERM_ListAttributes 
    | 8 -> NONTERM_ListAttributes 
    | 9 -> NONTERM_Rev_Attributes 
    | 10 -> NONTERM_Rev_Attributes 
    | 11 -> NONTERM_Rev_Attributes 
    | 12 -> NONTERM_Rev_Attributes 
    | 13 -> NONTERM_ListValues 
    | 14 -> NONTERM_ListValues 
    | 15 -> NONTERM_Rev_Values 
    | 16 -> NONTERM_Rev_Values 
    | 17 -> NONTERM_Rev_Values 
    | 18 -> NONTERM_Rev_Values 
    | 19 -> NONTERM_end 
    | _ -> failwith "prodIdxToNonTerminal: bad production index"

let _fsyacc_endOfInputTag = 16 
let _fsyacc_tagOfErrorTerminal = 14

// This function gets the name of a token as a string
let token_to_string (t:token) = 
  match t with 
  | RIGHT_LIM  -> "RIGHT_LIM" 
  | LEFT_LIM  -> "LEFT_LIM" 
  | EOF  -> "EOF" 
  | NOT  -> "NOT" 
  | EQUAL  -> "EQUAL" 
  | SELECT  -> "SELECT" 
  | PROJECT  -> "PROJECT" 
  | INSERT  -> "INSERT" 
  | RELATION  -> "RELATION" 
  | CREATE  -> "CREATE" 
  | TYPE' _ -> "TYPE'" 
  | LITERAL_STRING _ -> "LITERAL_STRING" 
  | LITERAL_INTEGER _ -> "LITERAL_INTEGER" 
  | IDENTIFIER _ -> "IDENTIFIER" 

// This function gets the data carried by a token as an object
let _fsyacc_dataOfToken (t:token) = 
  match t with 
  | RIGHT_LIM  -> (null : System.Object) 
  | LEFT_LIM  -> (null : System.Object) 
  | EOF  -> (null : System.Object) 
  | NOT  -> (null : System.Object) 
  | EQUAL  -> (null : System.Object) 
  | SELECT  -> (null : System.Object) 
  | PROJECT  -> (null : System.Object) 
  | INSERT  -> (null : System.Object) 
  | RELATION  -> (null : System.Object) 
  | CREATE  -> (null : System.Object) 
  | TYPE' _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LITERAL_STRING _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | LITERAL_INTEGER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
  | IDENTIFIER _fsyacc_x -> Microsoft.FSharp.Core.Operators.box _fsyacc_x 
let _fsyacc_gotos = [| 0us;65535us;1us;65535us;0us;1us;1us;65535us;0us;2us;1us;65535us;0us;5us;2us;65535us;9us;10us;13us;14us;2us;65535us;9us;22us;13us;22us;1us;65535us;19us;20us;1us;65535us;19us;33us;2us;65535us;0us;4us;2us;3us;|]
let _fsyacc_sparseGotoTableRowOffsets = [|0us;1us;3us;5us;7us;10us;13us;15us;17us;|]
let _fsyacc_stateToProdIdxsTableElements = [| 1us;0us;1us;0us;1us;1us;1us;1us;1us;2us;1us;3us;1us;4us;1us;4us;1us;4us;1us;4us;1us;4us;1us;4us;1us;5us;1us;5us;1us;5us;1us;5us;1us;5us;1us;6us;1us;6us;1us;6us;1us;6us;1us;6us;3us;8us;11us;12us;2us;9us;10us;2us;9us;10us;1us;9us;1us;9us;1us;9us;2us;11us;12us;2us;11us;12us;1us;12us;1us;12us;1us;12us;3us;14us;17us;18us;2us;15us;16us;2us;15us;16us;1us;15us;1us;15us;1us;15us;1us;15us;1us;16us;2us;17us;18us;2us;17us;18us;1us;17us;1us;18us;1us;18us;1us;18us;1us;18us;1us;19us;|]
let _fsyacc_stateToProdIdxsTableRowOffsets = [|0us;2us;4us;6us;8us;10us;12us;14us;16us;18us;20us;22us;24us;26us;28us;30us;32us;34us;36us;38us;40us;42us;44us;48us;51us;54us;56us;58us;60us;63us;66us;68us;70us;72us;76us;79us;82us;84us;86us;88us;90us;92us;95us;98us;100us;102us;104us;106us;108us;|]
let _fsyacc_action_rows = 49
let _fsyacc_actionTableElements = [|4us;32768us;2us;48us;6us;12us;7us;17us;9us;6us;0us;49152us;1us;32768us;2us;48us;0us;16385us;0us;16386us;0us;16387us;1us;32768us;8us;7us;1us;32768us;13us;8us;1us;32768us;1us;9us;1us;16391us;13us;23us;1us;32768us;0us;11us;0us;16388us;1us;32768us;1us;13us;1us;16391us;13us;23us;1us;32768us;0us;15us;1us;32768us;13us;16us;0us;16389us;1us;32768us;13us;18us;1us;32768us;1us;19us;1us;16397us;13us;34us;1us;32768us;0us;21us;0us;16390us;1us;16392us;13us;28us;1us;32768us;10us;24us;1us;16394us;1us;25us;1us;32768us;12us;26us;1us;32768us;0us;27us;0us;16393us;1us;32768us;10us;29us;1us;16395us;1us;30us;1us;32768us;12us;31us;1us;32768us;0us;32us;0us;16396us;1us;16398us;13us;41us;1us;32768us;10us;35us;2us;32768us;1us;36us;12us;40us;1us;32768us;12us;37us;1us;32768us;0us;38us;1us;32768us;11us;39us;0us;16399us;0us;16400us;1us;32768us;10us;42us;2us;32768us;1us;44us;12us;43us;0us;16401us;1us;32768us;12us;45us;1us;32768us;0us;46us;1us;32768us;11us;47us;0us;16402us;0us;16403us;|]
let _fsyacc_actionTableRowOffsets = [|0us;5us;6us;8us;9us;10us;11us;13us;15us;17us;19us;21us;22us;24us;26us;28us;30us;31us;33us;35us;37us;39us;40us;42us;44us;46us;48us;50us;51us;53us;55us;57us;59us;60us;62us;64us;67us;69us;71us;73us;74us;75us;77us;80us;81us;83us;85us;87us;88us;|]
let _fsyacc_reductionSymbolCounts = [|1us;2us;1us;1us;6us;5us;5us;0us;1us;5us;2us;3us;6us;0us;1us;6us;3us;4us;7us;1us;|]
let _fsyacc_productionToNonTerminalTable = [|0us;1us;1us;2us;3us;3us;3us;4us;4us;5us;5us;5us;5us;6us;6us;7us;7us;7us;7us;8us;|]
let _fsyacc_immediateActions = [|65535us;49152us;65535us;16385us;16386us;16387us;65535us;65535us;65535us;65535us;65535us;16388us;65535us;65535us;65535us;65535us;16389us;65535us;65535us;65535us;65535us;16390us;65535us;65535us;65535us;65535us;65535us;16393us;65535us;65535us;65535us;65535us;16396us;65535us;65535us;65535us;65535us;65535us;65535us;16399us;16400us;65535us;65535us;16401us;65535us;65535us;65535us;16402us;16403us;|]
let _fsyacc_reductions = lazy [|
# 170 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?>  Expression.t option  in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
                      raise (FSharp.Text.Parsing.Accept(Microsoft.FSharp.Core.Operators.box _1))
                   )
                 : 'gentype__startstart));
# 179 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_File in
            let _2 = parseState.GetInput(2) :?> 'gentype_end in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 36 "Parser.fsy"
                                       _1 
                   )
# 36 "Parser.fsy"
                 :  Expression.t option ));
# 191 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_end in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 37 "Parser.fsy"
                                       None 
                   )
# 37 "Parser.fsy"
                 :  Expression.t option ));
# 202 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Statement in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 40 "Parser.fsy"
                                    Some _1 
                   )
# 40 "Parser.fsy"
                 : 'gentype_File));
# 213 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> string in
            let _5 = parseState.GetInput(5) :?> 'gentype_ListAttributes in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 44 "Parser.fsy"
                            Expression.CreateRelation (_3, Map.ofList _5) 
                   )
# 44 "Parser.fsy"
                 : 'gentype_Statement));
# 225 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _3 = parseState.GetInput(3) :?> 'gentype_ListAttributes in
            let _5 = parseState.GetInput(5) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 46 "Parser.fsy"
                                   Expression.Project (_5, List.map (fun ((identifier: string), _type') -> identifier) _3) 
                   )
# 46 "Parser.fsy"
                 : 'gentype_Statement));
# 237 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> 'gentype_ListValues in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 48 "Parser.fsy"
                            Expression.Insert (_2, List.map (fun ((identifier: string), type', value) -> { FieldName = identifier; FieldType = type'; FieldValue = value }: Expression.InsertFieldInfo) _4 |> Array.ofList) 
                   )
# 48 "Parser.fsy"
                 : 'gentype_Statement));
# 249 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 51 "Parser.fsy"
                           [] 
                   )
# 51 "Parser.fsy"
                 : 'gentype_ListAttributes));
# 259 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Rev_Attributes in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 52 "Parser.fsy"
                                          List.rev _1 
                   )
# 52 "Parser.fsy"
                 : 'gentype_ListAttributes));
# 270 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 56 "Parser.fsy"
                           match _2 with
                           | "VARCHAR" -> [(_1, Type.TVariableString _4)] 
                   )
# 56 "Parser.fsy"
                 : 'gentype_Rev_Attributes));
# 284 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 59 "Parser.fsy"
                           match _2 with
                           | "INTEGER" -> [(_1, Type.TInteger32)]
                           | "VARCHAR" -> failwith "VARCHAR is a parametric type, therefore it requires a size." 
                   )
# 59 "Parser.fsy"
                 : 'gentype_Rev_Attributes));
# 298 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Rev_Attributes in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 62 "Parser.fsy"
                                                           (_2, match _3 with
                                                                | "INTEGER" -> Type.TInteger32
                                                                | "VARCHAR" -> failwith "VARCHAR is a parametric type, therefore it requires a size.") :: _1 
                   )
# 62 "Parser.fsy"
                 : 'gentype_Rev_Attributes));
# 313 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Rev_Attributes in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> string in
            let _5 = parseState.GetInput(5) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 66 "Parser.fsy"
                           (_2, match _3 with
                                | "VARCHAR" -> Type.TVariableString _5) :: _1 
                   )
# 66 "Parser.fsy"
                 : 'gentype_Rev_Attributes));
# 328 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 70 "Parser.fsy"
                           [] 
                   )
# 70 "Parser.fsy"
                 : 'gentype_ListValues));
# 338 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Rev_Values in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 71 "Parser.fsy"
                                      List.rev _1 
                   )
# 71 "Parser.fsy"
                 : 'gentype_ListValues));
# 349 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> string in
            let _4 = parseState.GetInput(4) :?> int in
            let _6 = parseState.GetInput(6) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 75 "Parser.fsy"
                           match _2 with
                           | "VARCHAR" -> [(_1, Type.TVariableString _4, Value.VVariableString _6)] 
                   )
# 75 "Parser.fsy"
                 : 'gentype_Rev_Values));
# 364 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> string in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 78 "Parser.fsy"
                           match _2 with
                           | "INTEGER" -> [(_1, Type.TInteger32, Value.VInteger32 _3)]
                           | "VARCHAR" -> failwith "VARCHAR is a parametric type, therefore it requires a size." 
                   )
# 78 "Parser.fsy"
                 : 'gentype_Rev_Values));
# 379 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Rev_Values in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> string in
            let _4 = parseState.GetInput(4) :?> int in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 82 "Parser.fsy"
                           (_2, (match _3 with
                                 | "INTEGER" -> Type.TInteger32
                                 | "VARCHAR" -> failwith "VARCHAR is a parametric type, therefore it requires a size."), Value.VInteger32 _4) :: _1 
                   )
# 82 "Parser.fsy"
                 : 'gentype_Rev_Values));
# 395 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            let _1 = parseState.GetInput(1) :?> 'gentype_Rev_Values in
            let _2 = parseState.GetInput(2) :?> string in
            let _3 = parseState.GetInput(3) :?> string in
            let _5 = parseState.GetInput(5) :?> int in
            let _7 = parseState.GetInput(7) :?> string in
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 86 "Parser.fsy"
                           (_2, (match _3 with
                                 | "VARCHAR" -> Type.TVariableString _5), Value.VVariableString _7) :: _1 
                   )
# 86 "Parser.fsy"
                 : 'gentype_Rev_Values));
# 411 "Parser.fs"
        (fun (parseState : FSharp.Text.Parsing.IParseState) ->
            Microsoft.FSharp.Core.Operators.box
                (
                   (
# 90 "Parser.fsy"
                                None 
                   )
# 90 "Parser.fsy"
                 : 'gentype_end));
|]
# 422 "Parser.fs"
let tables : FSharp.Text.Parsing.Tables<_> = 
  { reductions = _fsyacc_reductions.Value;
    endOfInputTag = _fsyacc_endOfInputTag;
    tagOfToken = tagOfToken;
    dataOfToken = _fsyacc_dataOfToken; 
    actionTableElements = _fsyacc_actionTableElements;
    actionTableRowOffsets = _fsyacc_actionTableRowOffsets;
    stateToProdIdxsTableElements = _fsyacc_stateToProdIdxsTableElements;
    stateToProdIdxsTableRowOffsets = _fsyacc_stateToProdIdxsTableRowOffsets;
    reductionSymbolCounts = _fsyacc_reductionSymbolCounts;
    immediateActions = _fsyacc_immediateActions;
    gotos = _fsyacc_gotos;
    sparseGotoTableRowOffsets = _fsyacc_sparseGotoTableRowOffsets;
    tagOfErrorTerminal = _fsyacc_tagOfErrorTerminal;
    parseError = (fun (ctxt:FSharp.Text.Parsing.ParseErrorContext<_>) -> 
                              match parse_error_rich with 
                              | Some f -> f ctxt
                              | None -> parse_error ctxt.Message);
    numTerminals = 17;
    productionToNonTerminalTable = _fsyacc_productionToNonTerminalTable  }
let engine lexer lexbuf startState = tables.Interpret(lexer, lexbuf, startState)
let start lexer lexbuf :  Expression.t option  =
    engine lexer lexbuf 0 :?> _
